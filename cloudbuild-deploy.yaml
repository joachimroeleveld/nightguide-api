steps:

  # Create config directory
- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args: [ "-c", "mkdir -p .config/secret/${_ENV}" ]

  # Decrypt secrets
- name: gcr.io/cloud-builders/gcloud
  args:
  - kms
  - decrypt
  - --ciphertext-file=secret.${_ENV}.enc
  - --project=${_PROJECT}
  - --plaintext-file=.config/secret/${_ENV}/secret.env
  - --location=global
  - --keyring=api
  - --key=secret-conf

  # Create .env
- name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args: [ "-c", "cat .config/secret/${_ENV}/secret.env .config/${_ENV}.env > .env" ]

  # Install dependencies
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']

  # Add Cloudbuild network config for compose
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: bash
  args: [ "-c", 'printf "\nnetworks:\n   default:\n      external:\n        name: cloudbuild" >> docker-compose.yml' ]

  # Spin up MongoDB container for tests
- name: 'docker/compose:1.23.1'
  args: ['up', '-d', 'mongo']

  # Run tests
- name: 'gcr.io/cloud-builders/npm'
  args: ['test']
  env:
  - 'MONGO_URI=mongodb://root:root@mongo:27017/main-test?authSource=admin'

  # Build Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'build', '-t', '${_IMAGE_REPO}/$PROJECT_ID/api', '.' ]

  # Tag image with git tag
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'tag', '${_IMAGE_REPO}/$PROJECT_ID/api', '${_IMAGE_REPO}/$PROJECT_ID/api:$TAG_NAME']

  # Push image
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'push', '${_IMAGE_REPO}/$PROJECT_ID/api' ]

  # Push image tag
- name: 'gcr.io/cloud-builders/docker'
  args: [ 'push', '${_IMAGE_REPO}/$PROJECT_ID/api:$TAG_NAME' ]

  # Create chart archive
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: bash
  args: ['-c', 'tar -czvf chart.tgz -C infra/helm/api .']

  # Upload chart archive
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'chart.tgz', 'gs://${_BUILDS_BUCKET}/api/${TAG_NAME}/chart.tgz']

  # Upload encrypted secrets
- name: 'gcr.io/cloud-builders/gsutil'
  args: ['cp', 'secrets.*.enc', 'gs://${_BUILDS_BUCKET}/api/${TAG_NAME}/']

artifacts:
  objects:
    location: 'gs://${_BUILDS_BUCKET}/api/${TAG_NAME}'
    paths: ['chart.tgz', 'secret.${_ENV}.enc']

images:
  - ${_IMAGE_REPO}/$PROJECT_ID/api
  - ${_IMAGE_REPO}/$PROJECT_ID/api:$TAG_NAME
