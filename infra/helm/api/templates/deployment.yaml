apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "api.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "api.name" . }}
    helm.sh/chart: {{ include "api.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "api.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "api.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      initContainers:
        - name: getenv
          image: "{{ .Values.containers.getenv.repository }}:{{ .Values.containers.getenv.tag }}"
          imagePullPolicy: {{ .Values.containers.api.pullPolicy }}
          command:
            - "/bin/bash"
            - "-ec"
            - |
              gcloud auth activate-service-account --key-file=/opt/init/google-key.json
              gsutil cp $ENV_FILE_URI /tmp/env.enc
              gcloud kms decrypt \
              --ciphertext-file=/tmp/env.enc \
              --plaintext-file=/opt/init/env/.env \
              --location=global \
              --keyring=$KMS_KEYRING \
              --key=$KMS_KEY
          env:
            - name: ENV_FILE_URI
              value: "{{ .Values.secrets.env.fileUri }}"
            - name: KMS_KEYRING
              value: "{{ .Values.secrets.env.kmsKeyRing }}"
            - name: KMS_KEY
              value: "{{ .Values.secrets.env.kmsKey }}"
          volumeMounts:
            - mountPath: "/opt/init/env"
              name: env
            - mountPath: "/opt/init/google-key.json"
              name: serviceaccount
              readOnly: true
              subPath: google-key.json
          resources:
            limits:
              cpu: 100m
              memory: 100M
            requests:
              cpu: 100m
              memory: 100M
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.containers.api.repository }}/api:{{ .Values.containers.api.tag }}"
          imagePullPolicy: {{ .Values.containers.api.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/usr/src/app/google-key.json"
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: "/usr/src/app/.env"
              name: env
              readOnly: true
              subPath: .env
            - mountPath: "/usr/src/app/google-key.json"
              name: serviceaccount
              readOnly: true
              subPath: google-key.json
      volumes:
        - name: env
          emptyDir: {}
        - name: serviceaccount
          secret:
            secretName: "{{ .Values.secrets.serviceaccount.name }}"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
