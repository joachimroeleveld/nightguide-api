openapi: 3.0.0
info:
  title: NightGuide API
  version: 0.1.0
servers:
  - url: https://api.nightguide.app
  - url: https://api.dev.nightguide.app

paths:
  /health:
    get:
      summary: Check health.
      operationId: checkHealth
      tags:
        - health
      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['ok']
                required:
                  - status
  /users:
    post:
      summary: Create a user.
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    password:
                      type: string
                      minLength: 6
                - $ref: '#/components/schemas/User'
              required:
                - email
                - password
                - firstName
                - lastName
                - birthday
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      summary: Get a user.
      operationId: getUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/login:
    post:
      summary: Login as a user.
      operationId: login
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                required:
                  - token
                  - user
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: Invalid autentication type (account was created throught different authentication method)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/login-fb:
    post:
      summary: Login a user in with Facebook credentials.
      operationId: loginFb
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - permissions
                - userId
              properties:
                token:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
                userId:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                required:
                  - token
                  - user
                  - isNew
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  isNew:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/verify-account:
    get:
      summary: Verify a user account
      operationId: verifyUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      responses:
        '200':
          description: Account verification page.
          content:
            text/html:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/resend-verification-token:
    post:
      summary: Resend an account verification email
      operationId: resendVerificationToken
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: Account has already been verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/send-password-reset:
    post:
      summary: Send password reset email
      operationId: sendPasswordReset
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/reset-password:
    get:
      summary: Reset password page
      operationId: resetPasswordPage
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Password reset token.
      responses:
        '200':
          description: Password reset page.
          content:
            text/html:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Reset password
      operationId: resetPassword
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues:
    get:
      summary: Get venues.
      operationId: getVenues
      tags:
        - venues
      parameters:
        - in: query
          name: pageSlug
          schema:
            type: string
        - in: query
          name: city
          schema:
            type: string
        - in: query
          name: country
          schema:
            type: string
        - in: query
          name: cat
          schema:
            type: array
            items:
              type: string
        - in: query
          name: tag
          schema:
            type: array
            items:
              type: string
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
        - in: query
          name: hasFb
          schema:
            type: boolean
        - in: query
          name: musicType
          schema:
            type: array
            items:
              type: string
        - in: query
          name: visitorType
          schema:
            type: array
            items:
              type: string
        - in: query
          name: paymentMethod
          schema:
            type: array
            items:
              type: string
        - in: query
          name: doorPolicy
          schema:
            type: array
            items:
              type: string
        - in: query
          name: dresscode
          schema:
            type: array
            items:
              type: string
        - in: query
          name: capRange
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 1
              maximum: 7
        - in: query
          name: priceClass
          schema:
            type: array
            items:
              type: integer
              format: int32
              minimum: 1
        - in: query
          name: noEntranceFee
          schema:
            type: boolean
        - in: query
          name: noCoatCheckFee
          schema:
            type: boolean
        - in: query
          name: noBouncers
          schema:
            type: boolean
        - in: query
          name: openTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: terraceTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: kitchenTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: busyTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: dancingTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: bitesTime
          schema:
            type: string
            format: 'date-time'
        - in: query
          name: vipArea
          schema:
            type: boolean
        - in: query
          name: smokingArea
          schema:
            type: boolean
        - in: query
          name: terrace
          schema:
            type: boolean
        - in: query
          name: terraceHeaters
          schema:
            type: boolean
        - in: query
          name: bouncers
          schema:
            type: boolean
        - in: query
          name: kitchen
          schema:
            type: boolean
        - in: query
          name: coatCheck
          schema:
            type: boolean
        - in: query
          name: parking
          schema:
            type: boolean
        - in: query
          name: cigarettes
          schema:
            type: boolean
        - in: query
          name: accessible
          schema:
            type: boolean
        - in: query
          name: query
          schema:
            type: string
            minLength: 2
            maxLength: 255
          description: Search query
        - in: query
          name: sortBy
          schema:
            type: array
            items:
              type: string
          description: Sort with optional order
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: exclude
          schema:
            type: array
            items:
              type: string
        - in: query
          name: longitude
          schema:
            type: number
          description: Longitude for distance sort
        - in: query
          name: latitude
          schema:
            type: number
          description: Latitude for distance sort
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          description: Number of items to return. Defaults to 20.
        - in: query
          name: fields
          schema:
            type: array
            items:
              type: string
          description: Fields to return. Returns limited set of fields by default.
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Result venues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Venue'
                  offset:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  totalCount:
                    type: integer
                    format: int32
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a venue.
      operationId: createVenue
      tags:
        - venues
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '201':
          description: Venue created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}:
    get:
      summary: Get a venue.
      operationId: getVenue
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Venue data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a venue.
      operationId: updateVenue
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '200':
          description: Venue updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a venue.
      operationId: deleteVenue
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}/images:
    post:
      summary: Create a venue image.
      operationId: createVenueImage
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
      responses:
        '200':
          description: Image uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}/images/{imageId}:
    delete:
      summary: Delete a venue image.
      operationId: deleteVenueImage
      tags:
        - events
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
        - in: path
          name: imageId
          schema:
            type: string
          required: true
          description: Image ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}/facebook-events:
    put:
      summary: Update a venue's Facebook events.
      operationId: updateFacebookVenueEvents
      tags:
        - events
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Event'
                required:
                  - facebook
                  - dates
      responses:
        '200':
          description: Events updated.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}/generate-ticket-codes:
    post:
      operationId: generateVenueTicketCodes
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      responses:
        '200':
          description: Ticket codes.
          content:
            application/json:
              schema:
                type: object
                properties:
                  codes:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events:
    get:
      operationId: getEvents
      tags:
        - events
      parameters:
        # TODO: uncomment when object parameter coercion works
        #        - $ref: '#/components/parameters/EventFilter'
        - in: query
          name: text
          schema:
            type: string
            minLength: 2
            maxLength: 255
          description: Search query
        - in: query
          name: venue
          schema:
            type: array
            items:
              type: string
        - in: query
          name: artist
          schema:
            type: array
            items:
              type: string
        - in: query
          name: isFbEvent
          schema:
            type: boolean
        - in: query
          name: datesChanged
          schema:
            type: boolean
        - in: query
          name: tagged
          schema:
            type: boolean
        - in: query
          name: dateFrom
          schema:
            type: string
            format: date-time
        - in: query
          name: createdAfter
          schema:
            type: string
            format: date-time
        - in: query
          name: createdBefore
          schema:
            type: string
            format: date-time
        - in: query
          name: city
          schema:
            type: string
        - in: query
          name: country
          schema:
            type: string
        - in: query
          name: tag
          schema:
            type: array
            items:
              type: string
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
        - in: query
          name: exclude
          schema:
            type: array
            items:
              type: string
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: sortBy
          schema:
            type: array
            items:
              type: string
          description: Sort with optional order
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          description: Number of items to return. Defaults to 20.
        - in: query
          name: fields
          schema:
            type: array
            items:
              type: string
          description: Fields to return. Returns limited set of fields by default.
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Result events.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  offset:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  totalCount:
                    type: integer
                    format: int32
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create an event.
      operationId: createEvent
      tags:
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/{eventId}:
    get:
      summary: Get an event.
      operationId: getEvent
      tags:
        - events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: Event ID.
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Event data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an event.
      operationId: updateEvent
      tags:
        - events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: Event ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete an event.
      operationId: deleteEvent
      tags:
        - events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: Event ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/{eventId}/images:
    post:
      summary: Create an event image.
      operationId: createEventImage
      tags:
        - events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: Event ID.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
      responses:
        '200':
          description: Image uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/{eventId}/images/{imageId}:
    delete:
      summary: Delete an event image.
      operationId: deleteEventImage
      tags:
        - events
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: Event ID.
        - in: path
          name: imageId
          schema:
            type: string
          required: true
          description: Image ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/facebook-events/{fbEventId}:
    get:
      summary: Get a Facebook event.
      operationId: getFacebookEvent
      tags:
        - events
      parameters:
        - in: path
          name: fbEventId
          schema:
            type: string
          required: true
          description: Facebook event ID.
      responses:
        '200':
          description: Event data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /events/facebook-events/{fbEventId}/image:
    put:
      summary: Update an event's Facebook image
      operationId: updateFacebookEventImage
      tags:
        - events
      parameters:
        - in: path
          name: fbEventId
          schema:
            type: string
          required: true
          description: Facebook event ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: object
                  properties:
                    url:
                      type: string
      responses:
        '200':
          description: Image uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  skipped:
                    type: boolean
                  updated:
                    type: boolean
                  result:
                    $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /misc/user-feedback:
    post:
      operationId: submitUserFeedback
      tags:
        - miscellaneous
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /tags:
    get:
      operationId: getTags
      tags: [tags]
      parameters:
        - in: query
          name: slugs
          schema:
            type: array
            items:
              type: string
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Result tags.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
                  totalCount:
                    type: integer
                    format: int32
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a tag.
      operationId: createTag
      tags:
        - tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '201':
          description: Tag created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /tags/{tagId}:
    get:
      summary: Get a tag.
      operationId: getTag
      tags:
        - tags
      parameters:
        - in: path
          name: tagId
          schema:
            type: string
          required: true
          description: Tag ID.
      responses:
        '200':
          description: Tag data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a tag.
      operationId: updateTag
      tags:
        - tags
      parameters:
        - in: path
          name: tagId
          schema:
            type: string
          required: true
          description: Tag ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: Tag updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a tag.
      operationId: deleteTag
      tags:
        - tags
      parameters:
        - in: path
          name: tagId
          schema:
            type: string
          required: true
          description: Tag ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /tags/slug/{tagSlug}:
    get:
      summary: Get a tag by slug.
      operationId: getTagBySlug
      tags:
        - tags
      parameters:
        - in: path
          name: tagSlug
          schema:
            type: string
          required: true
          description: Tag slug.
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Tag data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /artists:
    get:
      operationId: getArtists
      tags: [artists]
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: query
          schema:
            type: string
      responses:
        '200':
          description: Result artists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artist'
                  totalCount:
                    type: integer
                    format: int32
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create an artist.
      operationId: createArtist
      tags:
        - artists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '201':
          description: Artist created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /artists/{artistId}:
    get:
      summary: Get an artist.
      operationId: getArtist
      tags:
        - artists
      parameters:
        - in: path
          name: artistId
          schema:
            type: string
          required: true
          description: Artist ID.
      responses:
        '200':
          description: Artist data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update an artist.
      operationId: updateArtist
      tags:
        - artists
      parameters:
        - in: path
          name: artistId
          schema:
            type: string
          required: true
          description: Artist ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        '200':
          description: Artist updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete an artist.
      operationId: deleteArtist
      tags:
        - artists
      parameters:
        - in: path
          name: artistId
          schema:
            type: string
          required: true
          description: Artist ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /configs:
    get:
      operationId: getConfigs
      tags: [configs]
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: query
          schema:
            type: string
        - in: query
          name: pageSlug
          schema:
            type: string
      responses:
        '200':
          description: Result configs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Config'
                  totalCount:
                    type: integer
                    format: int32
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a config.
      operationId: createConfig
      tags:
        - configs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '201':
          description: Config created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /configs/{configId}:
    get:
      summary: Get a config.
      operationId: getConfig
      tags:
        - configs
      parameters:
        - in: path
          name: configId
          schema:
            type: string
          required: true
          description: Config ID.
      responses:
        '200':
          description: Config data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a config.
      operationId: updateConfig
      tags:
        - configs
      parameters:
        - in: path
          name: configId
          schema:
            type: string
          required: true
          description: Config ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          description: Config updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a config.
      operationId: deleteConfig
      tags:
        - configs
      parameters:
        - in: path
          name: configId
          schema:
            type: string
          required: true
          description: Config ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /configs/name/{configName}:
    get:
      operationId: getConfigByName
      tags: [configs]
      parameters:
        - in: path
          required: true
          name: configName
          schema:
            type: string
        - in: query
          name: pageSlug
          schema:
            type: string
      responses:
        '200':
          description: Result config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '500':
          $ref: '#/components/responses/ServerError'
  /content:
    post:
      summary: Create content from a certain type.
      operationId: createContent
      tags:
        - content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        '201':
          description: Content created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      operationId: getContent
      tags:
        - content
      parameters:
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: pageSlug
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
        - in: query
          name: fields
          schema:
            type: array
            items:
              type: string
          description: Fields to return.
      responses:
        '200':
          description: Result content.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Content'
                  totalCount:
                    type: integer
                    format: int32
        '500':
          $ref: '#/components/responses/ServerError'
  /content/{contentId}:
    get:
      operationId: getContentById
      tags:
        - content
      parameters:
        - in: path
          name: contentId
          schema:
            type: string
          required: true
          description: Content ID
        - in: query
          name: populate
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      operationId: updateContentById
      tags:
        - content
      parameters:
        - in: path
          name: contentId
          schema:
            type: string
          required: true
          description: Content ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        '200':
          description: Content updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      operationId: deleteContentById
      tags:
        - content
      parameters:
        - in: path
          name: contentId
          schema:
            type: string
          required: true
          description: Content ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /content/slug/{slug}:
    get:
      operationId: getContentBySlug
      tags:
        - content
      parameters:
        - in: path
          name: slug
          schema:
            type: string
          required: true
          description: URL slug
      responses:
        '200':
          description: Content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /content/{contentId}/images:
    post:
      summary: Create a content image.
      operationId: createContentImage
      tags:
        - content
      parameters:
        - in: path
          name: contentId
          schema:
            type: string
          required: true
          description: Content ID.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      url:
                        type: string
      responses:
        '200':
          description: Image uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /content/{contentId}/images/{imageId}:
    delete:
      summary: Delete a content image.
      operationId: deleteContentImage
      tags:
        - events
      parameters:
        - in: path
          name: contentId
          schema:
            type: string
          required: true
          description: Content ID.
        - in: path
          name: imageId
          schema:
            type: string
          required: true
          description: Image ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /orders:
    get:
      operationId: getOrders
      tags: [orders]
      parameters:
        - in: query
          name: ids
          schema:
            type: array
            items:
              type: string
        - in: query
          name: status
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Result orders.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  totalCount:
                    type: integer
                    format: int32
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a order.
      operationId: createOrder
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /orders/{orderId}:
    get:
      summary: Get a order.
      operationId: getOrder
      tags:
        - orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID.
      responses:
        '200':
          description: Order data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a order.
      operationId: updateOrder
      tags:
        - orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a order.
      operationId: deleteOrder
      tags:
        - orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID.
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /orders/{orderId}/metadata/{metaKey}:
    put:
      summary: Update order metadata.
      operationId: updateOrderMetadata
      tags:
        - orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID.
        - in: path
          name: metaKey
          schema:
            type: string
          required: true
          description: Metadata key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: '#/components/schemas/AnyValue'
      responses:
        '200':
          description: Order metadata.
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /orders/{orderId}/downloads:
    get:
      summary: Get order downloads.
      operationId: getOrderDownloads
      tags:
        - orders
      parameters:
        - in: path
          name: orderId
          schema:
            type: string
          required: true
          description: Order ID.
        - in: query
          name: key
          schema:
            type: string
          required: true
          description: Download key
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request did not satisfy the requirements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Success:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
            required:
              - success
  schemas:
    Artist:
      properties:
        id:
          type: string
        name:
          type: string
    Tag:
      properties:
        id:
          type: string
        slug:
          type: string
        name:
          $ref: '#/components/schemas/TranslatedObject'
    Image:
      required:
        - id
        - filename
        - filetype
        - filesize
        - url
        - width
        - height
      properties:
        id:
          type: string
          description: UUIDv4 image ID (also part of filename).
        filename:
          type: string
        filetype:
          type: string
          description: Image's MIME type.
        filesize:
          type: number
        url:
          type: string
          description: Serveable image URL.
        width:
          type: number
          description: Image width.
        height:
          type: number
          description: Image height.
        extraData:
          type: object
    Venue:
      type: object
      properties:
        id:
          type: string
        sourceId:
          type: number
          format: int32
        name:
          type: string
        queryText:
          type: string
        pageSlug:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/VenueCategories'
        description:
          $ref: '#/components/schemas/TranslatedObject'
        location:
          type: object
          properties:
            address1:
              type: string
            address2:
              type: string
            postalCode:
              type: string
            city:
              type: string
            country:
              type: string
              minLength: 2
              maxLength: 2
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
            googlePlaceId:
              type: string
        website:
          type: string
        facebook:
          type: object
          properties:
            id:
              type: string
            pagesId:
              type: string
        instagram:
          type: object
          properties:
            id:
              type: string
            explorePage:
              type: string
        twitterHandle:
          type: string
        musicTypes:
          type: array
          items:
            $ref: '#/components/schemas/VenueMusicTypes'
        visitorTypes:
          type: array
          items:
            $ref: '#/components/schemas/VenueVisitorTypes'
        dresscode:
          $ref: '#/components/schemas/VenueDresscodes'
        paymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/VenuePaymentMethods'
        doorPolicy:
          type: object
          properties:
            policy:
              $ref: '#/components/schemas/VenueDoorPolicies'
            description:
              $ref: '#/components/schemas/TranslatedObject'
        prices:
          type: object
          properties:
            coke:
              type: number
              format: double
            beer:
              type: number
              format: double
        priceClass:
          type: integer
          format: int32
          minimum: 1
        fees:
          type: object
          properties:
            coatCheck:
              type: number
              format: double
            entrance:
              type: number
              format: double
        entranceFeeRange:
          type: array
          items:
            type: integer
            format: int32
            minimum: 0
        capacity:
          type: integer
          format: int32
          minimum: 0
        capacityRange:
          type: array
          items:
            type: integer
            format: int32
            minimum: 0
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/VenueFacilities'
        images:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/Image'
        admin:
          type: object
          properties:
            hide:
              type: boolean
    VenueFacilities:
      type: string
      enum:
        [
          'vip_area',
          'smoking_area',
          'bouncers',
          'kitchen',
          'coat_check',
          'parking',
          'cigarettes',
          'accessible',
          'terrace',
          'terrace_heaters',
        ]
    VenueDoorPolicies:
      type: string
      enum: ['moderate', 'strict', 'guestlist']
    VenuePaymentMethods:
      type: string
      enum: ['debit_card', 'credit_card', 'cash']
    VenueDresscodes:
      type: string
      enum: ['chique', 'alternative']
    VenueVisitorTypes:
      type: string
      enum:
        [
          'teenagers',
          'students',
          'young_professionals',
          'middle_aged',
          'seniors',
          'international',
          'locals',
          'lgbtq',
          'varying',
        ]
    VenueMusicTypes:
      type: string
      enum:
        [
          'techno',
          'dance',
          'live',
          'varying',
          'jazz',
          'apres_ski',
          'country',
          'miscellaneous',
          'folk',
          'house',
          'lounge',
          'no_music',
          'hip_hop',
          'rock',
          'classical',
          '80s_90s',
          'disco',
          'latin',
          'electro',
        ]
    VenueCategories:
      type: string
      enum:
        [
          'club',
          'dancing_bar',
          'beach_club',
          'bar',
          'lounge_bar',
          'craft_beer_bar',
          'cocktail_bar',
          'concert_venue',
          'strip_club',
          'blues_bar',
          'casino',
          'comedy_bar',
          'country_bar',
          'hookah_bar',
          'irish_pub',
          'jazz_bar',
          'karaoke_bar',
          'lgbtq_bar',
          'piano_bar',
          'sports_bar',
          'wine_bar',
          'whisky_bar',
        ]
    Event:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        queryText:
          type: string
        date:
          $ref: '#/components/schemas/EventDate'
        dates:
          type: array
          items:
            $ref: '#/components/schemas/EventDate'
        description:
          $ref: '#/components/schemas/TranslatedObject'
        location:
          type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: ['address', 'venue']
            address1:
              type: string
            address2:
              type: string
            postalCode:
              type: string
            city:
              type: string
            country:
              type: string
              minLength: 2
              maxLength: 2
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
        images:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/Image'
        facebook:
          type: object
          properties:
            id:
              type: string
            title:
              type: string
            description:
              type: string
            datesChanged:
              type: boolean
        tickets:
          type: object
          properties:
            provider:
              type: string
            checkoutUrl:
              type: string
            providerData:
              type: object
            displayPrice:
              type: number
              format: float
              nullable: true
            products:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  price:
                    type: number
                    format: float
        admin:
          type: object
          properties:
            hide:
              type: boolean
    EventDate:
      type: object
      properties:
        id:
          type: string
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        interestedCount:
          type: number
          format: int32
          nullable: true
        ticketsUrl:
          type: string
        providerEventId:
          type: string
        artists:
          type: array
          items:
            oneOf:
              - type: object
              - type: string
        isHot:
          type: boolean
    Order:
      type: object
      properties:
        status:
          type: string
        billingDetails:
          type: object
          properties:
            email:
              type: string
            name:
              type: string
            address:
              type: object
              properties:
                city:
                  type: string
                country:
                  type: string
                line1:
                  type: string
                line2:
                  type: string
                postalCode:
                  type: string
                state:
                  type: string
            items:
              type: array
              items:
                type: object
                properties:
                  sku:
                    type: string
                  quantity:
                    type: integer
                    format: int32
                    minimum: 1
                  price:
                    type: number
                    format: float
                    minimum: 0
                  currency:
                    type: string
            metadata:
              type: object
    Content:
      type: object
      required:
        - title
      properties:
        type:
          type: string
          enum:
            - venues-article
            - page
            - blog
        title:
          $ref: '#/components/schemas/TranslatedObject'
        urlSlugs:
          type: array
          items:
            type: string
            maxLength: 255
    Config:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        pageSlug:
          type: string
          nullable: true
        payload:
          type: object
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum: ['male', 'female', 'other']
        birthday:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TranslatedObject:
      type: object
      properties:
        en:
          type: string
        nl:
          type: string
    Error:
      type: object
      properties:
        status:
          type: number
          description: HTTP status code
        type:
          type: string
          description: Error identifier
        message:
          type: string
          description: Human-readable error description
      required:
        - status
        - type
    AnyValue: {}
