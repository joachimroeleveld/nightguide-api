openapi: 3.0.0
info:
  title: NightGuide API
  version: 0.1.0
servers:
  - url: https://api.nightguide.app
  - url: https://api.dev.nightguide.app

paths:
  /health:
    get:
      summary: Check health.
      operationId: checkHealth
      tags:
        - health
      responses:
        '200':
          description: Status OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ['ok']
                required:
                  - status
  /users:
    post:
      summary: Create a user.
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    password:
                      type: string
                      minLength: 6
                - $ref: '#/components/schemas/User'
              required:
                - email
                - password
                - firstName
                - lastName
                - gender
                - birthday
      responses:
        '201':
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}:
    get:
      summary: Get a user.
      operationId: getUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/login:
    post:
      summary: Login as a user.
      operationId: login
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                required:
                  - token
                  - user
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: Invalid autentication type (account was created throught different authentication method)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/login-fb:
    post:
      summary: Login a user in with Facebook credentials.
      operationId: loginFb
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - permissions
                - userId
              properties:
                token:
                  type: string
                permissions:
                  type: array
                  items:
                    type: string
                userId:
                  type: string
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                required:
                  - token
                  - user
                  - isNew
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
                  isNew:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/verify-account:
    get:
      summary: Verify a user account
      operationId: verifyUser
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      responses:
        '200':
          description: Account verification page.
          content:
            text/html:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/resend-verification-token:
    post:
      summary: Resend an account verification email
      operationId: resendVerificationToken
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: Account has already been verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/send-password-reset:
    post:
      summary: Send password reset email
      operationId: sendPasswordReset
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /users/{userId}/reset-password:
    get:
      summary: Reset password page
      operationId: resetPasswordPage
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Password reset token.
      responses:
        '200':
          description: Password reset page.
          content:
            text/html:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Reset password
      operationId: resetPassword
      tags:
        - users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: User ID.
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Verification token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
      responses:
        200:
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues:
    get:
      summary: Get venues.
      operationId: getVenues
      tags:
        - venues
      parameters:
        - in: query
          name: query
          schema:
            type: string
            minLength: 2
            maxLength: 255
          description: Search query
        - in: query
          name: sortBy
          schema:
            type: string
          description: Sort with optional order separated by comma (e.g. distance,desc)
        - in: query
          name: longitude
          schema:
            type: number
          description: Longitude for distance sort
        - in: query
          name: latitude
          schema:
            type: number
          description: Latitude for distance sort
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
            minimum: 0
          description: Number of items to skip
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          description: Number of items to return. Defaults to 20.
        - in: query
          name: fields
          schema:
            type: array
            items:
              type: string
              enum:
                [
                  name,
                  categories,
                  tags,
                  images,
                  description,
                  location,
                  website,
                  facebook,
                ]
          description: Fields to return. Returns limited set of fields by default.
      responses:
        '200':
          description: Result venues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Venue'
                  offset:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a venue.
      operationId: createVenue
      tags:
        - venues
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '201':
          description: Venue created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}:
    get:
      summary: Get a venue.
      operationId: getVenue
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      responses:
        '200':
          description: Venue data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update a venue.
      operationId: updateVenue
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Venue'
      responses:
        '200':
          description: Venue updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /venues/{venueId}/images:
    post:
      summary: Create a venue image.
      operationId: createVenueImage
      tags:
        - venues
      parameters:
        - in: path
          name: venueId
          schema:
            type: string
          required: true
          description: Venue ID.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
          application/json:
            schema:
              type: object
              properties:
                urls:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Image uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/VenueImage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /misc/user-feedback:
    post:
      operationId: submitUserFeedback
      tags:
        - miscellaneous
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request did not satisfy the requirements
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Success:
      description: Success
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
            required:
              - success
  schemas:
    Venue:
      type: object
      properties:
        id:
          type: string
        sourceId:
          type: number
          format: int32
        name:
          type: string
        categories:
          type: array
          items:
            type: string
            enum:
              [
                'club',
                'bar',
                'lounge',
                'craft_beer_bar',
                'cocktail_bar',
                'concert_venue',
                'adult',
                'blues_bar',
                'casino',
                'comedy_bar',
                'country_bar',
                'hookah_bar',
                'irish_pub',
                'jazz_bar',
                'karaoke_bar',
                'lgbtq_bar',
                'piano_bar',
                'sports_bar',
                'wine_bar',
                'whisky_bar',
              ]
        description:
          $ref: '#/components/schemas/TranslatedObject'
        location:
          type: object
          properties:
            address1:
              type: string
            address2:
              type: string
            postalCode:
              type: string
            city:
              type: string
            country:
              type: string
              enum: ['NL']
            coordinates:
              type: object
              properties:
                latitude:
                  type: number
                  format: float
                longitude:
                  type: number
                  format: float
        website:
          type: string
        facebook:
          type: object
          properties:
            id:
              type: string
        instagram:
          type: object
          properties:
            id:
              type: string
            explorePage:
              type: string
        twitterHandle:
          type: string
        musicTypes:
          type: array
          items:
            type: string
            enum:
              [
                'techno',
                'dance',
                'live',
                'varying',
                'jazz',
                'apres_ski',
                'country',
                'miscellaneous',
                'folk',
                'house',
                'lounge',
                'no_music',
                'hip_hop',
                'rock',
                'classical',
                '80s_90s',
                'disco',
                'latin',
                'electro',
              ]
        visitorTypes:
          type: array
          items:
            type: string
            enum:
              [
                'seniors',
                'students',
                'young_professionals',
                'middle_aged',
                'varying',
                'international',
                'locals',
                'lbgtq',
              ]
        dresscode:
          type: string
          enum:
            [
            'casual',
            'chique',
            'alternative'
            ]
        paymentMethods:
          type: array
          items:
            type: string
            enum:
              [
                'debit_card',
                'credit_card',
                'alternative'
              ]
        doorPolicy:
          type: object
          properties:
            policy:
              type: string
              enum:
                [
                  'moderate',
                  'strict',
                  'guestlist'
                ]
            description:
              type: string
        prices:
          type: object
          properties:
            cola:
              type: number
              format: double
            beer:
              type: number
              format: double
        fees:
          type: object
          properties:
            wardrobe:
              type: number
              format: double
            entrance:
              type: number
              format: double
        capacity:
          type: integer
          format: int32
          minimum: 0
        facilities:
          type: array
          items:
            type: string
            enum:
              [
                'vip_area',
                'smoking_area',
                'bouncers',
                'kitchen',
                'coat_check',
                'parking',
                'cigarettes',
                'accessible',
                'terrace',
                'terrace_heaters',
              ]
        images:
          type: array
          items:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/VenueImage'
    VenueImage:
      type: object
      required:
        - id
        - filename
        - filetype
        - filesize
        - url
        - width
        - height
      properties:
        id:
          type: string
          description: UUIDv4 image ID (also part of filename).
        filename:
          type: string
        filetype:
          type: string
          description: Image's MIME type.
        filesize:
          type: number
        url:
          type: string
          description: Serveable image URL.
        width:
          type: number
          description: Image width.
        height:
          type: number
          description: Image height.
    User:
      type: object
      required:
        - email
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum: ['male', 'female', 'other']
        birthday:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    TranslatedObject:
      type: object
      properties:
        en:
          type: string
        nl:
          type: string
    Error:
      type: object
      properties:
        status:
          type: number
          description: HTTP status code
        type:
          type: string
          description: Error identifier
        message:
          type: string
          description: Human-readable error description
      required:
        - status
        - type
